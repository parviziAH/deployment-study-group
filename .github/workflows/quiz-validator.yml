name: Quiz Answer Validator
on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]

jobs:
  validate-quiz-answers:
    if: contains(github.event.pull_request.labels.*.name, 'check_theory')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history to ensure we get all files

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Debug file contents
        run: |
          echo "Content of exercise files:"
          for file in exercises/theory/*.md; do
            echo "=== $file ==="
            head -n 20 "$file"
            echo "===================="
          done

      - name: Update validate_quiz.py script
        run: |
          cat > .github/scripts/validate_quiz.py << 'EOF'
          import os
          import re
          import requests
          import json
          
          def find_quiz_files():
              quiz_files = []
              theory_dir = 'exercises/theory'
              if os.path.exists(theory_dir):
                  for file in os.listdir(theory_dir):
                      if file.endswith('.md'):
                          quiz_files.append(os.path.join(theory_dir, file))
              return quiz_files
          
          def extract_answers(file_path):
              with open(file_path, 'r', encoding='utf-8') as f:
                  content = f.read()
              
              # Extract questions and options
              questions = []
              current_q = None
              
              for line in content.split('\n'):
                  # Find question line (numbered questions)
                  q_match = re.match(r'^\d+\.\s+\*\*(.+?)\*\*$', line)
                  if q_match:
                      if current_q:
                          questions.append(current_q)
                      current_q = {'question': q_match.group(1), 'options': [], 'selected': None}
                      continue
                  
                  # Find options
                  opt_match = re.match(r'\s*-\s+(\[[\sx]\])\s+(.+)$', line)
                  if opt_match and current_q is not None:
                      is_selected = 'x' in opt_match.group(1)
                      option_text = opt_match.group(2)
                      current_q['options'].append(option_text)
                      if is_selected:
                          current_q['selected'] = option_text
              
              # Add the last question
              if current_q:
                  questions.append(current_q)
                  
              return questions
          
          def validate_answers(file_path, questions):
              results = []
              for i, q in enumerate(questions):
                  # For this simple validation, we'll check if:
                  # 1. A selection was made
                  # 2. The selection is not the first option (which was wrongly detected)
                  if not q['selected']:
                      results.append(f"Q{i+1}: ✗ No option selected")
                  elif "deployments are always faster" in q['selected']:
                      results.append(f"Q{i+1}: ✗ Selected incorrect option")
                  else:
                      results.append(f"Q{i+1}: ✓ Correct")
              
              return results
          
          def post_comment(results, file_name):
              pr_number = os.environ.get('PR_NUMBER')
              token = os.environ.get('GITHUB_TOKEN')
              repo = os.environ.get('GITHUB_REPOSITORY')
              
              if not all([pr_number, token, repo]):
                  print("Missing environment variables, can't post comment")
                  return
              
              headers = {
                  'Authorization': f'token {token}',
                  'Accept': 'application/vnd.github.v3+json'
              }
              
              comment = f"## Quiz Validation Results for {file_name}\n\n"
              comment += "\n".join(results)
              
              url = f"https://api.github.com/repos/{repo}/issues/{pr_number}/comments"
              data = {'body': comment}
              
              response = requests.post(url, headers=headers, data=json.dumps(data))
              if response.status_code != 201:
                  print(f"Failed to post comment: {response.text}")
          
          def main():
              print("Starting quiz validation...")
              quiz_files = find_quiz_files()
              print(f"Found {len(quiz_files)} quiz files: {quiz_files}")
              
              for file_path in quiz_files:
                  file_name = os.path.basename(file_path)
                  print(f"Processing {file_name}...")
                  
                  questions = extract_answers(file_path)
                  print(f"Found {len(questions)} questions.")
                  
                  # Debug the extraction
                  for i, q in enumerate(questions):
                      print(f"Q{i+1}: {q['question']}")
                      print(f"  Selected: {q['selected']}")
                      
                  results = validate_answers(file_path, questions)
                  print(f"Validation results: {results}")
                  
                  post_comment(results, file_name)
          
          if __name__ == "__main__":
              main()
          EOF

      - name: Validate quiz answers
        id: validate
        run: |
          python .github/scripts/validate_quiz.py
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}